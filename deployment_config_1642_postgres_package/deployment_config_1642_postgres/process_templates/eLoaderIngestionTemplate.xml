<media-mogul-configuration>
	<config groupname="eLoaderIngestionTemplate">
		<modules>
			<module ref="QueueChecker">
				<class>com.picdar.process2.Acquisition.QueueChecker.QueueChecker</class>
				<config>
					<queue-name>%%value:queue-name%%</queue-name>
					<item-location>package</item-location>
					<sort-items>%%value:sort-by-priority%%</sort-items>
					<limit>100</limit>
					<batch-size>1</batch-size>
					<store-data><props>QUEUE_INFO</props></store-data>
				</config>
			</module>
			
			<module ref="QueueWriter">
				<class>com.picdar.process2.Acquisition.QueueWriter.QueueWriter</class>
				<config>
					<queue-name>%%value:queue-name%%_ATTACHMENTS</queue-name>
					<remove-process-items>false</remove-process-items>
					<store-data>queue-items</store-data>
				</config>
			</module>
			
			<module ref="EmailUnpacker">
				<class>com.picdar.process2.Processing.EmailUnpacker.EmailUnpacker</class>
				<config>
					<package-parent-directory>%%value:package-parent-directory%%</package-parent-directory>
					<package-location-store-name>PACKAGE_LOC</package-location-store-name>
					<metadata-properties-store-name>COMMON_METADATA</metadata-properties-store-name>
					<filepath-to-mimetype-store-name>FILEPATH_TO_SUFFIX</filepath-to-mimetype-store-name>
					<ignored-emails-directory>%%value:ignored-emails-directory%%</ignored-emails-directory>
					<partially-failed-emails-directory>%%value:partially-failed-emails-directory%%</partially-failed-emails-directory>
					<content-types>
						<action>%%value:content-type-action%%</action>
						<values>%%value:content-type-values%%</values>
					</content-types>
					<discard-duplicate-attachments>%%value:discard-duplicate-attachments%%</discard-duplicate-attachments>
					<concatenate-message-bodies>%%value:concatenate-message-bodies%%</concatenate-message-bodies>
					<remove-signatures>%%value:remove-signatures%%</remove-signatures>
					<move-failed-emails>%%value:move-failed-emails%%</move-failed-emails>
					<failed-emails-directory>%%value:failed-emails-directory%%</failed-emails-directory>
					<get-metadata-from-message>%%value:get-metadata-from-message%%</get-metadata-from-message>
					<metadata-names>%%value:metadata-names%%</metadata-names>
					<output-package-metadata>%%value:output-package-metadata%%</output-package-metadata>
					<filter-archive-types>%%value:filter-archive-types%%</filter-archive-types>
					<archive-extraction-timeout>%%value:archive-extraction-timeout%%</archive-extraction-timeout>
					<execution-type>MMTE</execution-type>
					<MMTE>%%value:mmte%%</MMTE>
					<delete-original-email>false</delete-original-email>
					<extract-files>false</extract-files>
					<accept-just-message>true</accept-just-message>
				</config>
			</module>

			<module ref="Build Story">
				<class>com.picdar.process2.Processing.BuildDataObject.BuildDataObject</class>
				<config>
					<store-name>STORY_DO</store-name>
					<object-type>STORY</object-type>
					<datasource>%%value:datasource%%</datasource>
					<field name="EMAIL_CONTENT" fill-from-properties="COMMON_METADATA" property-key="MESSAGE_BODY" />
					<field name="EMAIL_SUBJECT" fill-from-properties="COMMON_METADATA" property-key="Subject" />
					<field name="EMAIL_SENDER" fill-from-properties="COMMON_METADATA" property-key="From" />
					<field name="EMAIL_TO" fill-from-properties="COMMON_METADATA" property-key="CHP_EMAIL" />
					<field name="FEED_NAME" fill-from-properties="QUEUE_INFO" property-key="FEED_NAME" />
					<field name="FILE_NAME" fill-from-filename="true" />
					<field name="FILE_PATH" fill-from-filepath="true" />
					<!--field name="JOB_NUMBER" fill-from-filename="true" /-->
				</config>
			</module>

			<module ref="CHP DO to CHP XML">
				<class>com.picdar.process2.Processing.DataObjects2XML.DataObjects2XML</class>
				<config>
					<read-name>STORY_DO</read-name>
					<store-name>STORY_XML</store-name>
				</config>
			</module>
			
			<module ref="Transform Asset Metadata">
				<class>com.picdar.process2.Processing.XMLTransformer.XMLTransformer</class>
				<config>
					<dump-xml>false</dump-xml>
					<transform name="eStoryFeedTransformer">
						<readname>STORY_XML</readname>
						<storename>STORY_DO_XML</storename>
						<trans-props>
						</trans-props>
					</transform>
					<failureiscritical>true</failureiscritical>
				</config>
			</module>

			<module ref="Converts to dataobject">
				<class>com.picdar.process2.Repository.MetadataConverter.MetaDataConverter</class>
				<config>
					<object-name>STORY_DO_XML</object-name>
					<store-name>STORY_DO</store-name>
				</config>
			</module>

			<module ref="TransactionStart">
				<class>com.picdar.process2.Core.TransactionStart</class>
				<config/>
			</module>
			
			<module ref="Story_DataObjectLoader">
				<class>com.picdar.process2.Repository.DataObjectLoader.DataObjectLoader</class>
				<config>
					<object-name>STORY_DO</object-name>
					<create-asset-records>true</create-asset-records>
					<create-asset-record-types>STORY</create-asset-record-types>
				</config>
			</module>

			<module ref="TransactionEnd">
				<class>com.picdar.process2.Core.TransactionEnd</class>
				<config/>
			</module>
			
			<module ref="Set owner">
				<class>com.picdar.process2.Repository.Security.SetOwnershipAndPolicies</class>
				<config>
					<readName>STORY_DO</readName>
					<default>
						<owner role="%%value:OWNER%%"/>
					</default>
				</config>
			</module>
			
			<module ref="Get Commission Record">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<!--statement>SELECT ASSET_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@'</statement-->
					<statement>SELECT ASSET_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@' UNION ALL SELECT NULL AS ASSET_ID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@')</statement>
					<store_name>COMMISSION_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>
			
			<!--module ref="Inspect COMMISSION DO">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting COMMISSION DO</message>
			              <inspect>COMMISSION_DO</inspect>
			       </config>
			</module-->

			<module ref="Link to Commission if exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<run_conditions rule-do-item="COMMISSION_DO">
						<rules>
							<rule name="CommissionExist">
								<criteria>
									<!--criterion field="ASSET_ID" operator="ne" value="NONE"/-->
									<criterion field="ASSET_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_packages (node_id, timestamp, asset_id) select '@@read-from:COMMISSION_DO:ASSET_ID@@', sysdate, s.asset_id from story s where s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and s.feed_name='%%value:feed-name%%' and not exists (select 1 from asset_packages where node_id = '@@read-from:COMMISSION_DO:ASSET_ID@@' and asset_id=s.asset_id)</statement>
					<statement>insert into mm_queue (CREATION_STAMP,TABLE_NAME,ATTEMPT_COUNT,DATABASE,QUEUE_NAME,PRIORITY,PRIMARY_KEY,STATUS,LAST_ERROR,FEED_NAME,ITEM_KEY,USER_NAME,QUEUE_INDEX,ACTION,INFO,INDEX_ID,UPDATE_STAMP) select sysdate,'',0,'','PCP_COMMISSION_LINK_UPDATE',10,mm_index_queue_seq.nextval,'PENDING','','',s.asset_id,'Administrator',mm_index_queue_seq.nextval,'link','@@read-from:COMMISSION_DO:ASSET_ID@@',mm_index_queue_seq.nextval,sysdate from story s where s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and s.feed_name='%%value:feed-name%%'</statement>
				</config>
			</module>

			<module ref="Link to Lobby community folder if Commission not exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<run_conditions rule-do-item="COMMISSION_DO">
						<rules>
							<rule name="CommissionNotExist">
								<criteria>
									<!--criterion field="ASSET_ID" operator="eq" value="NONE"/-->
									<criterion field="ASSET_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_category(asset_id,timestamp,node_id) select s.asset_id, sysdate, h.node_id from story s, hard_categories h where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and upper(h.key) = upper('%%value:community-folder%%') and not exists (select 1 from asset_category where asset_id = s.asset_id and node_id = h.node_id)</statement>
				</config>
			</module>
			
			<module ref="Get Number of Contracts associated with this Commission">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT COUNT(NODE_ID) AS NO_OF_CONTRACT FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@')</statement>
					<store_name>CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

<!--
			<module ref="Get Contracts if exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="DefaultContract">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) ORDER BY NVL(DEFAULT_ROYALTY,0) DESC, NODE_ID</statement>
					<store_name>DEFAULT_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Inspect DEFAULT_CONTRACT_DO">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting DEFAULT_CONTRACT_DO</message>
			              <inspect>DEFAULT_CONTRACT_DO</inspect>
			       </config>
			</module>

			<module ref="Copy Default Contract Id to DataObject if Contracts exist">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="DefaultContract">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<object-name>DEFAULT_CONTRACT_DO</object-name>
					<metadata-processors>
						<processor class="com.picdar.process2.Processing.MetaDataProcessor.TransferObjectValues" ref="NODE_ID">
							<properties>
								<create-target-fields>true</create-target-fields>
								<transfer-type>Simple</transfer-type>
								<source-field>NODE_ID</source-field>
								<target_1>CONTRACT_DO.DEFAULT_CONTRACT_ID</target_1>
							</properties>
						</processor>
					</metadata-processors>
				</config>
			</module>

			<module ref="Inspect CONTRACT_DO">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting CONTRACT_DO</message>
			              <inspect>CONTRACT_DO</inspect>
			       </config>
			</module>

			<module ref="Set Contributor (contract) to the asset if exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="DefaultContract">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select s.asset_id, sysdate, '@@read-from:CONTRACT_DO:DEFAULT_CONTRACT_ID@@' from story s where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = s.asset_id and royalty_id = '@@read-from:CONTRACT_DO:DEFAULT_CONTRACT_ID@@')</statement>
				</config>
			</module>
-->

			<module ref="Get Default Contract">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) AND DEFAULT_ROYALTY = 1 UNION ALL SELECT NULL AS NODE_ID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) AND DEFAULT_ROYALTY = 1)</statement>
					<store_name>DEFAULT_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>


			<module ref="Set Contributor (default contract) to the asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractExist">
								<criteria>
									<criterion field="NODE_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select s.asset_id, sysdate, '@@read-from:DEFAULT_CONTRACT_DO:NODE_ID@@' from story s where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = s.asset_id and royalty_id = '@@read-from:DEFAULT_CONTRACT_DO:NODE_ID@@')</statement>
				</config>
			</module>

			<module ref="Get First Available Contract if Default Contract Not Exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractNotExist">
								<criteria>
									<criterion field="NODE_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT MIN(NODE_ID) AS NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) AND (DEFAULT_ROYALTY != 1 OR DEFAULT_ROYALTY IS NULL)</statement>
					<store_name>FIRST_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Set Contributor (first contract) to the asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractNotExist">
								<criteria>
									<criterion field="NODE_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="FIRST_CONTRACT_DO">
						<rules>
							<rule name="FirstContractExist">
								<criteria>
									<criterion field="NODE_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select s.asset_id, sysdate, '@@read-from:FIRST_CONTRACT_DO:NODE_ID@@' from story s where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = s.asset_id and royalty_id = '@@read-from:FIRST_CONTRACT_DO:NODE_ID@@')</statement>
				</config>
			</module>

			<module ref="Re-index asset">
			     <class>com.picdar.process2.Repository.Indexer.Indexer</class>
			     <config>
			           <index-manager-resource>QueueIndexManager</index-manager-resource>
			           <datasource>default</datasource>
			           <failureiscritical>false</failureiscritical>
			           <indexfrom>dataobject</indexfrom>
			           <data-object-name>STORY_DO</data-object-name>
			           <indextables>picture,story,document,media,composite,page</indextables>
			           <batchsize>10</batchsize>
			     </config>
			</module>

		</modules>
		%%template:ProcessSchedule%%
	</config>
</media-mogul-configuration>