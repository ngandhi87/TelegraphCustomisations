<media-mogul-configuration>

<description>
This process will process assets unlinked from 'Picture Editors In Tray' folder and its children folders.
</description>

	<config groupname="Lifecycle">
		<properties>
			<CLASS>Workflow</CLASS>
			<TYPE>Lifecycle</TYPE>
			<NAME>Unlinked from Picture Editors In Tray</NAME>
			<APP_GROUP description="Application group">SYSGROUP2</APP_GROUP>
			<POLICY_GROUP description="Name of policy group">Picture Editors Only Admin</POLICY_GROUP>
			<NORMALLY_RUNNING>y</NORMALLY_RUNNING>
		</properties>
			
		<schedule>
			<scheduletype>continuous</scheduletype>
			<runinterval>
				<count>2</count>
				<intervalsize>minute</intervalsize>
			</runinterval>
			<timedschedule>
				<months>1-12</months>
				<dates>1-31</dates>
				<weekdays>1-7</weekdays>
				<hours>0-23</hours>
				<minutes>0</minutes>
			</timedschedule>
		</schedule>

		<modules>
			<module ref="Finds the queue entries to process">
				<class>com.picdar.process2.Acquisition.QueueChecker.QueueChecker</class>
				<config>
					<queue-name>UNLINKED_FROM_PIC_EDITORS_ONLY</queue-name>
					<item-location>database</item-location>
					<batch-size>1</batch-size>
					<limit>0</limit>
					<fail-rejected>yes</fail-rejected>
					<remove-ignored-items>no</remove-ignored-items>
					<requeue-ignored-items>yes</requeue-ignored-items>
					<store-data>
						<info>QUEUE_INFO</info>
					</store-data>
				</config>
			</module>

			<module ref="Read the Picture record from the CHP">
				<class>com.picdar.process2.Repository.DataReader.J2EE.DataReaderJ2EE</class>
				<config>
					<datasource>default</datasource>
					<do-store-name>IMAGE_DO</do-store-name>
				</config>
			</module>

			<module ref="Read the Asset record from the CHP">
				<class>com.picdar.process2.Repository.DataReader.J2EE.DataReaderJ2EE</class>
				<config>
					<datasource>default</datasource>
					<do-store-name>ASSET_DO</do-store-name>
					<type>ASSET</type>
				</config>
			</module>
<!--			
			<module ref="Debug-1">
                <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			    <config>
					<message>Inspecting Before Changes</message>
			    </config>
			</module>
-->
			<module ref="Delete POLICY_GROUP policy assigned to asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>delete from mm_policy where policy_id in (select policy_id from asset_policy_link where asset_id = '@@read-from:__process-key@@') and role_id = (select role_id from mm_role where role_name = '%%value:POLICY_GROUP%%')</statement>
					<statement>delete from asset_policy_link where asset_id = '@@read-from:__process-key@@' and not exists (select 1 from mm_policy where asset_policy_link.policy_id = mm_policy.policy_id)</statement>
				</config>
			</module>

			<module ref="Restore original values from EMD">
				<class>com.picdar.process2.Processing.ScriptProcessor.ScriptProcessor</class>
				<config>
					<script-name>RestoreOriginalMetadataFromEMD</script-name>
					<script-properties>
						<dataobject>IMAGE_DO</dataobject>
						<emd-kind>EXTRA_METADATA</emd-kind>
						<original-field1>OWNER_ID</original-field1>
						<stored-field1>ORIGINAL_OWNER</stored-field1>
					</script-properties>
				</config>
			</module>
	
			<module ref="Set the lifecycle status for the asset to Feed">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>

					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-do-item="IMAGE_DO">
						<rules>
							<rule name="OriginalLifeCycleIsNotArchive">
								<criteria>
									<conjunct type="or">
										<criterion field="[ORIGIN]ORIGINAL_LIFECYCLE_STATUS" operator="eq" value="Feed"/>
										<criterion field="[ORIGIN]ORIGINAL_LIFECYCLE_STATUS" operator="eq" value="Parked"/>
										<criterion field="[ORIGIN]ORIGINAL_LIFECYCLE_STATUS" operator="notexists"/>
									</conjunct>
								</criteria>
							</rule>
						</rules>
					</run_conditions>			
					<run_conditions rule-do-item="ASSET_DO">
						<rules>
							<rule name="CurrentLifeCycleIsArchive">
								<criteria>
									<criterion field="LIFECYCLE_STATUS" operator="eq" value="Archive"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>			

					<object-name>IMAGE_DO</object-name>
					<add-attributes>
						<add-attribute name="LIFECYCLE_STATUS">Feed</add-attribute>
					</add-attributes>
				</config>
			</module>

			<module ref="Set the lifecycle status for the asset to Archive">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-do-item="IMAGE_DO">
						<rules>
							<rule name="OriginalLifeCycleIsArchive">
								<criteria>
									<criterion field="[ORIGIN]ORIGINAL_LIFECYCLE_STATUS" operator="eq" value="Archive"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>			
					<run_conditions rule-do-item="ASSET_DO">
						<rules>
							<rule name="CurrentLifeCycleIsNotArchive">
								<criteria>
									<criterion field="LIFECYCLE_STATUS" operator="ne" value="Archive"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>			

					<object-name>IMAGE_DO</object-name>
					<add-attributes>
						<add-attribute name="LIFECYCLE_STATUS">Archive</add-attribute>
					</add-attributes>
				</config>
			</module>
			
 			<!-- Start the transaction. -->
			<module ref="TransactionStart">
				<class>com.picdar.process2.Core.TransactionStart</class>
                <config>
                    <restriction>no-enrichment</restriction>
                </config>
			</module>

			<!-- Save the asset. -->
			<module ref="DataObjectLoader">
				<class>com.picdar.process2.Repository.DataObjectLoader.DataObjectLoader</class>
				<config>
					<object-name>IMAGE_DO</object-name>
					<match-existing-records>true</match-existing-records>
					<match-by-primary-key>true</match-by-primary-key>
					<update-matched-records>true</update-matched-records>
					<reject-unmatched-records>true</reject-unmatched-records>
					<reject-matched-records>false</reject-matched-records>
					<types-to-match>PICTURE,STORY,DOCUMENT,MEDIA,PAGE,COMPOSITE</types-to-match>
				</config>
			</module>

			<!-- End the transaction. -->
			<module ref="TransactionEnd">
				<class>com.picdar.process2.Core.TransactionEnd</class>
				<config/>
			</module>
<!--
			<module ref="Debug-2">
                <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			    <config>
					<message>Inspecting After Changes</message>
			    </config>
			</module>
-->
		</modules>
	</config>
</media-mogul-configuration>