<media-mogul-configuration>
	<config groupname="eLoaderIngestionStoryAttachmentsTemplate">
		<modules ref="Processor">
			<module ref="QueueChecker">
				<class>com.picdar.process2.Acquisition.QueueChecker.QueueChecker</class>
				<config>
					<queue-name>%%value:queue-name%%</queue-name>
					<item-location>package</item-location>
					<sort-items>%%value:sort-by-priority%%</sort-items>
					<limit>100</limit>
					<batch-size>1</batch-size>
					<store-data><props>QUEUE_INFO</props></store-data>
				</config>
			</module>
			
			<module ref="QueueWriter">
				<class>com.picdar.process2.Acquisition.QueueWriter.QueueWriter</class>
				<config>
					<queue-name>%%value:queue-name%%_IMAGES</queue-name>
					<remove-process-items>false</remove-process-items>
					<store-data>queue-items</store-data>
				</config>
			</module>

			<module ref="EmailUnpacker Email Content">
				<class>com.picdar.process2.Processing.EmailUnpacker.EmailUnpacker</class>
				<config>
					<package-parent-directory>%%value:package-parent-directory%%</package-parent-directory>
					<package-location-store-name>PACKAGE_LOC</package-location-store-name>
					<metadata-properties-store-name>COMMON_METADATA</metadata-properties-store-name>
					<filepath-to-mimetype-store-name>FILEPATH_TO_SUFFIX</filepath-to-mimetype-store-name>
					<ignored-emails-directory>%%value:ignored-emails-directory%%</ignored-emails-directory>
					<partially-failed-emails-directory>%%value:partially-failed-emails-directory%%</partially-failed-emails-directory>
					<content-types>
						<action>%%value:content-type-action%%</action>
						<values>%%value:content-type-values%%</values>
					</content-types>
					<discard-duplicate-attachments>%%value:discard-duplicate-attachments%%</discard-duplicate-attachments>
					<concatenate-message-bodies>%%value:concatenate-message-bodies%%</concatenate-message-bodies>
					<remove-signatures>%%value:remove-signatures%%</remove-signatures>
					<move-failed-emails>%%value:move-failed-emails%%</move-failed-emails>
					<failed-emails-directory>%%value:failed-emails-directory%%</failed-emails-directory>
					<get-metadata-from-message>%%value:get-metadata-from-message%%</get-metadata-from-message>
					<metadata-names>%%value:metadata-names%%</metadata-names>
					<output-package-metadata>%%value:output-package-metadata%%</output-package-metadata>
					<filter-archive-types>%%value:filter-archive-types%%</filter-archive-types>
					<archive-extraction-timeout>%%value:archive-extraction-timeout%%</archive-extraction-timeout>
					<execution-type>MMTE</execution-type>
					<MMTE>%%value:mmte%%</MMTE>
					<delete-original-email>false</delete-original-email>
					<extract-files>true</extract-files>
					<accept-just-message>true</accept-just-message>
				</config>
			</module>

			<!--module ref="Inspect After EmailUnpacker">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting After EmailUnpacker</message>
			       </config>
			</module-->

			<module ref="Verify if email contains Word attachment">
				<class>com.picdar.process2.Processing.ScriptProcessor.ScriptProcessor</class>
				<config>
					<script-name>VerifyEmailContainWordAttachment</script-name>
					<script-properties>
						<filepath-to-suffix>FILEPATH_TO_SUFFIX</filepath-to-suffix>
						<is-word-attachment-exist>IS_WORD_ATTACHMENT_EXIST</is-word-attachment-exist>
					</script-properties>
					<script-performs-cleanup>true</script-performs-cleanup>
				</config>
			</module>

			<!--module ref="Inspect After VerifyEmailContainWordAttachment">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting After VerifyEmailContainWordAttachment</message>
			       </config>
			</module-->
			
			<module ref="Build Story If No Word Attachment Found">
				<class>com.picdar.process2.Processing.BuildDataObject.BuildDataObject</class>
				<config>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="NoWordAttachment">
								<criteria>
									<criterion field="IS_WORD_ATTACHMENT_EXIST" operator="eq" value="N"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<store-name>STORY_DO</store-name>
					<object-type>STORY</object-type>
					<datasource>%%value:datasource%%</datasource>
					<field name="EMAIL_CONTENT" fill-from-properties="COMMON_METADATA" property-key="MESSAGE_BODY" />
					<field name="EMAIL_SUBJECT" fill-from-properties="COMMON_METADATA" property-key="Subject" />
					<field name="EMAIL_SENDER" fill-from-properties="COMMON_METADATA" property-key="From" />
					<field name="EMAIL_TO" fill-from-properties="COMMON_METADATA" property-key="To" />
					<field name="FEED_NAME" fill-from-properties="QUEUE_INFO" property-key="FEED_NAME" />
					<field name="FILE_NAME" fill-from-filename="true" />
					<field name="FILE_PATH" fill-from-filepath="true" />
				</config>
			</module>

			<module ref="Build Story From Word Attachment">
				<class>com.picdar.process2.Acquisition.Packager.Packager</class>
				<config>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="WordAttachmentFound">
								<criteria>
									<criterion field="IS_WORD_ATTACHMENT_EXIST" operator="eq" value="Y"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<package-location-store>PACKAGE_LOC</package-location-store>
					<package-file-to-type-store>FILEPATH_TO_SUFFIX</package-file-to-type-store>
					<metadata-store-name>STORY_DO</metadata-store-name>
					<metadata-default-datasource>default</metadata-default-datasource>
					<metadata-default-tablename>STORY</metadata-default-tablename>
					<package-metadata>
						<property-store name="QUEUE_INFO">
							<map dofield="FEED_NAME" propfield="FEED_NAME"/>
						</property-store>
						<property-store name="COMMON_METADATA">
							<map dofield="EMAIL_CONTENT" propfield="MESSAGE_BODY"/>
							<map dofield="EMAIL_SUBJECT" propfield="Subject"/>
							<map dofield="EMAIL_SENDER" propfield="From"/>
							<map dofield="EMAIL_TO" propfield="To"/>
						</property-store>
						<filename-fields>FILE_NAME</filename-fields>
						<filepath-fields>FILE_PATH</filepath-fields>
					</package-metadata>
					<item-location>filesystem</item-location>
					<text-report>true</text-report>
					<loaded-directory>%%value:loadedDir%%</loaded-directory>
					<rejected-directory>%%value:rejectsDir%%</rejected-directory>
					<partially-rejected-directory>%%value:partialRejectsDir%%</partially-rejected-directory>
					<move-package>true</move-package>
					<delete-on-success>false</delete-on-success>
					<reject-condition>all</reject-condition>
					<descend>true</descend>
					<ignored-items-store>ignored-items</ignored-items-store>
					<rejected_items-store>rejected-items</rejected_items-store>
					<successful-items-store>successful-items</successful-items-store>
					<move-type>normal</move-type>
					<ignoreZeroLength>true</ignoreZeroLength>
					<direxcludefilter>.*</direxcludefilter>
					<dirincludefilter/>
					<fileexcludefilter>.*</fileexcludefilter>
					<fileincludefilter/>
				</config>
			</module>

			<!--module ref="Inspect After Build Story">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting After Build Story</message>
			       </config>
			</module-->

			<!-- extract the metadata from the asset -->
			<module ref="AssetMetadataExtractor">
				<class>com.picdar.process2.Acquisition.AssetMetadata.AssetMetadataExtractor</class>
				<config>
					<run_conditions rule-do-item="STORY_DO">
						<rules>
							<rule name="WordAttachmentFound">
								<criteria>
						                        <conjunct type="or">
										<criterion field="FILE_NAME" operator="ends" value=".doc"/>
										<criterion field="FILE_NAME" operator="ends" value=".docx"/>
						                        </conjunct>
									
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<MMTE>MMTE</MMTE>
					<retrieve-data>
						<dataobject>STORY_DO</dataobject>
					</retrieve-data>
					<store-data>
						<asset-metadata>STORY_MD</asset-metadata>
						<dataobject>STORY_DO</dataobject>
					</store-data>
					<extract-primary-key iptc-tag="external ref">false</extract-primary-key>
					<iptc-tag name="Contents">ATTACHMENT_CONTENT</iptc-tag>
				</config>
			</module>
			
			<!--module ref="Inspect After AssetMetadataExtractor">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting After AssetMetadataExtractor</message>
			       </config>
			</module-->

			<module ref="Read the Email Subject from the DataObject and store it in the ProcessItem">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>
					<object-name>STORY_DO</object-name>
					<metadata-processors>
						<processor class="com.picdar.process2.Processing.MetaDataProcessor.AttributeToProcessItemObject" ref="CopyEmailSubject">
							<properties>
								<attribute-name>EMAIL_SUBJECT</attribute-name>
								<target-object>EMAIL_SUBJECT</target-object>
							</properties>
						</processor>
					</metadata-processors>
				</config>
			</module>

			<!--module ref="Inspect EMAIL_SUBJECT">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting EMAIL_SUBJECT</message>
			              <inspect>EMAIL_SUBJECT</inspect>
			       </config>
			</module-->

			<module ref="Extract Job Number (commission id) for Email Subject - New Commission C{Commission ID}:{Commission Name}">
				<class>com.picdar.process2.Processing.DataProcessor.DataProcessor</class>
				<config>
					<data-processors>
						<processor ref="Extract commission id" class="com.picdar.process2.Processing.DataProcessor.StringProcessor">
							<properties>
								<source-item>EMAIL_SUBJECT</source-item>
								<dest-item>JOB_NUMBER</dest-item>
								<extract-regex>[C][0-9]+</extract-regex>
							</properties>
						</processor>
					</data-processors>
				</config>
			</module>

			<module ref="Read the JOB_NUMBER ProcessItem and store it in the STORY DataObject">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>
					<object-name>STORY_DO</object-name>
					<metadata-processors>
						<processor class="com.picdar.process2.Processing.MetaDataProcessor.AttributeFromProcessItemObject" ref="CopyJobNumber">
							<properties>
								<attribute-name>JOB_NUMBER</attribute-name>
								<source-object>JOB_NUMBER</source-object>
							</properties>
						</processor>
					</metadata-processors>
				</config>
			</module>

			<!--module ref="Inspect JOB_NUMBER">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting JOB_NUMBER</message>
			              <inspect>JOB_NUMBER</inspect>
			       </config>
			</module-->

			<module ref="Get existing story">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<run_conditions rule-do-item="STORY_DO">
						<rules>
							<rule name="JobNumberExist">
								<criteria>
									<criterion field="JOB_NUMBER" operator="exists"/>
						                        <conjunct type="and">
										<criterion field="JOB_NUMBER" operator="exists"/>
										<criterion field="JOB_NUMBER" operator="ne" value=""/>
						                        </conjunct>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT ASSET_ID, SEGMENTS FROM STORY WHERE JOB_NUMBER='@@read-from:STORY_DO:JOB_NUMBER@@'</statement>
					<store_name>EXIST_STORY_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Read the SEGMENTS from the DataObject and store it in the ProcessItem">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>
					<run_conditions rule-do-item="STORY_DO">
						<rules>
							<rule name="JobNumberExist">
								<criteria>
						                        <conjunct type="and">
										<criterion field="JOB_NUMBER" operator="exists"/>
										<criterion field="JOB_NUMBER" operator="ne" value=""/>
						                        </conjunct>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<object-name>EXIST_STORY_DO</object-name>
					<!--empty-action>ignore</empty-action-->
					<metadata-processors>
						<processor class="com.picdar.process2.Processing.MetaDataProcessor.AttributeToProcessItemObject" ref="CopyExistingAssetId">
							<properties>
								<attribute-name>ASSET_ID</attribute-name>
								<target-object>EXIST_ASSET_ID</target-object>
							</properties>
						</processor>
						<processor class="com.picdar.process2.Processing.MetaDataProcessor.AttributeToProcessItemObject" ref="CopySegments">
							<properties>
								<attribute-name>SEGMENTS</attribute-name>
								<target-object>EXIST_SEGMENTS</target-object>
							</properties>
						</processor>
					</metadata-processors>
				</config>
			</module>

			<module ref="Extract Existing Body">
				<class>com.picdar.process2.Processing.XMLXPathSelector.XMLXPathSelector</class>
				<config>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="StoryExist">
								<criteria>
									<criterion field="EXIST_SEGMENTS" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<xpath>/story-segments/segment[@type='BODY']/content</xpath>
					<read-name>EXIST_SEGMENTS</read-name>
					<store-name>EXIST_STORY_BODY</store-name>
					<message-if-not-found>Failed to find existing story body</message-if-not-found>
				</config>
			</module>			

			<module ref="Read the EXIST_STORY_BODY ProcessItem and store it in the STORY DataObject">
				<class>com.picdar.process2.Processing.MetaDataProcessor.MetaDataProcessor</class>
				<config>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="StoryExist">
								<criteria>
									<criterion field="EXIST_SEGMENTS" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<object-name>STORY_DO</object-name>
					<metadata-processors>
						<processor class="com.picdar.process2.Processing.MetaDataProcessor.AttributeFromProcessItemObject" ref="CopyExistingStory">
							<properties>
								<attribute-name>EXIST_STORY_BODY</attribute-name>
								<source-object>EXIST_STORY_BODY</source-object>
							</properties>
						</processor>
					</metadata-processors>
				</config>
			</module>

			<!--module ref="Inspect After checking existing story">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting After checking existing story</message>
			       </config>
			</module-->

			<module ref="CHP DO to CHP XML">
				<class>com.picdar.process2.Processing.DataObjects2XML.DataObjects2XML</class>
				<config>
					<read-name>STORY_DO</read-name>
					<store-name>STORY_XML</store-name>
				</config>
			</module>
			
			<module ref="Transform Asset Metadata">
				<class>com.picdar.process2.Processing.XMLTransformer.XMLTransformer</class>
				<config>
					<dump-xml>false</dump-xml>
					<transform name="eStoryCommissionFeedTransformer">
						<readname>STORY_XML</readname>
						<storename>STORY_DO_XML</storename>
						<trans-props>
							<UPDATED_STORY_ACTION>%%value:updated-story-action%%</UPDATED_STORY_ACTION>
						</trans-props>
					</transform>
					<failureiscritical>true</failureiscritical>
				</config>
			</module>

			<module ref="Converts to dataobject">
				<class>com.picdar.process2.Repository.MetadataConverter.MetaDataConverter</class>
				<config>
					<object-name>STORY_DO_XML</object-name>
					<store-name>STORY_DO</store-name>
				</config>
			</module>

			<!--module ref="Inspect After Transformer">
			       <class>com.picdar.process2.Testing.DataInspector.DataInspector</class>
			       <config>
			              <message>Inspecting After Transformer</message>
			       </config>
			</module-->


			<module ref="TransactionStart">
				<class>com.picdar.process2.Core.TransactionStart</class>
				<config/>
			</module>
			
			<module ref="Create/Update the Story record in CHP">
				<class>com.picdar.process2.Repository.DataObjectLoader.DataObjectLoader</class>
				<config>
					<object-name>STORY_DO</object-name>
					<match_existing_records>true</match_existing_records>
					<match_by_primary_key>true</match_by_primary_key>
					<ignore-matched-records>false</ignore-matched-records>
					<reject_matched_records>false</reject_matched_records>
					<update_matched_records>true</update_matched_records>
					<reject_unmatched_records>true</reject_unmatched_records>
					<create-asset-records>true</create-asset-records>
					<metadata-types>STORY</metadata-types>
					<create-asset-versions>false</create-asset-versions>

					<store-data-object-properties>
						<!--story>
							<OVERRIDE_DATE_STAMPS>true</OVERRIDE_DATE_STAMPS>
						</story-->
					</store-data-object-properties>
				</config>
			</module>

			<module ref="TransactionEnd">
				<class>com.picdar.process2.Core.TransactionEnd</class>
				<config/>
			</module>
			
			
			<module ref="Process new story record">
				<class>com.picdar.process2.Processing.ModuleSet.RunModuleSets</class>
				<config>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="NewStory">
								<criteria>
									<criterion field="EXIST_ASSET_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<module-set>NewStory</module-set>
				</config>
			</module> 		

		</modules>

		<modules ref="NewStory" run="no">			
			
			<module ref="Set owner">
				<class>com.picdar.process2.Repository.Security.SetOwnershipAndPolicies</class>
				<config>
					<readName>STORY_DO</readName>
					<default>
						<owner role="%%value:OWNER%%"/>
					</default>
				</config>
			</module>
			
			<module ref="Get Commission Record">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<!--statement>SELECT ASSET_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:STORY_DO:JOB_NUMBER@@'</statement-->
					<statement>SELECT ASSET_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = LTRIM('@@read-from:STORY_DO:JOB_NUMBER@@','C') UNION ALL SELECT NULL AS ASSET_ID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM PCP_COMMISSION WHERE COMMISSION_ID = LTRIM('@@read-from:STORY_DO:JOB_NUMBER@@','C'))</statement>
					<store_name>COMMISSION_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>
			
			<module ref="Link to Commission if exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="CommissionObjExist">
								<criteria>
									<criterion field="COMMISSION_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="COMMISSION_DO">
						<rules>
							<rule name="CommissionExist">
								<criteria>
									<criterion field="ASSET_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_packages (node_id, timestamp, asset_id) select '@@read-from:COMMISSION_DO:ASSET_ID@@', sysdate, s.asset_id from story s where s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and s.feed_name='%%value:feed-name%%' and not exists (select 1 from asset_packages where node_id = '@@read-from:COMMISSION_DO:ASSET_ID@@' and asset_id=s.asset_id)</statement>
					<statement>insert into mm_queue (CREATION_STAMP,TABLE_NAME,ATTEMPT_COUNT,DATABASE,QUEUE_NAME,PRIORITY,PRIMARY_KEY,STATUS,LAST_ERROR,FEED_NAME,ITEM_KEY,USER_NAME,QUEUE_INDEX,ACTION,INFO,INDEX_ID,UPDATE_STAMP) select sysdate,'',0,'','PCP_COMMISSION_LINK_UPDATE',10,mm_index_queue_seq.nextval,'PENDING','','',s.asset_id,'Administrator',mm_index_queue_seq.nextval,'link','@@read-from:COMMISSION_DO:ASSET_ID@@',mm_index_queue_seq.nextval,sysdate from story s where s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and s.feed_name='%%value:feed-name%%'</statement>
				</config>
			</module>

			<module ref="Link to Lobby community folder if Commission not exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="CommissionObjExist">
								<criteria>
									<criterion field="COMMISSION_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="COMMISSION_DO">
						<rules>
							<rule name="CommissionNotExist">
								<criteria>
									<criterion field="ASSET_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_category(asset_id,timestamp,node_id) select s.asset_id, sysdate, h.node_id from story s, hard_categories h where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and upper(h.key) = upper('%%value:community-folder%%') and not exists (select 1 from asset_category where asset_id = s.asset_id and node_id = h.node_id)</statement>
				</config>
			</module>
			
			<module ref="Get Number of Contracts associated with this Commission">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT COUNT(NODE_ID) AS NO_OF_CONTRACT FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = LTRIM('@@read-from:STORY_DO:JOB_NUMBER@@','C'))</statement>
					<store_name>CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Get Default Contract">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = LTRIM('@@read-from:STORY_DO:JOB_NUMBER@@','C') AND CHPCONTRIBUTOR_ID IS NOT NULL) AND DEFAULT_ROYALTY = 1 UNION ALL SELECT NULL AS NODE_ID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = LTRIM('@@read-from:STORY_DO:JOB_NUMBER@@','C') AND CHPCONTRIBUTOR_ID IS NOT NULL) AND DEFAULT_ROYALTY = 1)</statement>
					<store_name>DEFAULT_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>


			<module ref="Set Contributor (default contract) to the asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractExist">
								<criteria>
									<criterion field="NODE_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select s.asset_id, sysdate, '@@read-from:DEFAULT_CONTRACT_DO:NODE_ID@@' from story s where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = s.asset_id and royalty_id = '@@read-from:DEFAULT_CONTRACT_DO:NODE_ID@@')</statement>
				</config>
			</module>

			<module ref="Get First Available Contract if Default Contract Not Exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractNotExist">
								<criteria>
									<criterion field="NODE_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT MIN(NODE_ID) AS NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = LTRIM('@@read-from:STORY_DO:JOB_NUMBER@@','C') AND CHPCONTRIBUTOR_ID IS NOT NULL) AND (DEFAULT_ROYALTY != 1 OR DEFAULT_ROYALTY IS NULL)</statement>
					<store_name>FIRST_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Set Contributor (first contract) to the asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractNotExist">
								<criteria>
									<criterion field="NODE_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="FIRST_CONTRACT_DO">
						<rules>
							<rule name="FirstContractExist">
								<criteria>
									<criterion field="NODE_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select s.asset_id, sysdate, '@@read-from:FIRST_CONTRACT_DO:NODE_ID@@' from story s where s.feed_name='%%value:feed-name%%' and s.asset_id = '@@read-from:STORY_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = s.asset_id and royalty_id = '@@read-from:FIRST_CONTRACT_DO:NODE_ID@@')</statement>
				</config>
			</module>

			<module ref="Re-index asset">
			     <class>com.picdar.process2.Repository.Indexer.Indexer</class>
			     <config>
			           <index-manager-resource>IndexManager</index-manager-resource>
			           <datasource>default</datasource>
			           <failureiscritical>false</failureiscritical>
			           <indexfrom>dataobject</indexfrom>
			           <data-object-name>STORY_DO</data-object-name>
			           <indextables>picture,story,document,media,composite,page</indextables>
			           <batchsize>10</batchsize>
			     </config>
			</module>

		</modules>

		%%template:ProcessSchedule%%
	</config>
</media-mogul-configuration>