<media-mogul-configuration>
	<config groupname="eLoaderPictureIngestionTemplate">
		<modules>
			<module ref="QueueChecker">
				<class>com.picdar.process2.Acquisition.QueueChecker.QueueChecker</class>
				<config>
					<queue-name>%%value:queue-name%%_ATTACHMENTS</queue-name>
					<item-location>package</item-location>
					<sort-items>%%value:sort-by-priority%%</sort-items>
					<limit>100</limit>
					<batch-size>1</batch-size>
					<store-data><props>QUEUE_INFO</props></store-data>
				</config>
			</module>
			
			<module ref="EmailUnpacker">
				<class>com.picdar.process2.Processing.EmailUnpacker.EmailUnpacker</class>
				<config>
					<package-parent-directory>%%value:package-parent-directory%%</package-parent-directory>
					<package-location-store-name>PACKAGE_LOC</package-location-store-name>
					<metadata-properties-store-name>COMMON_METADATA</metadata-properties-store-name>
					<filepath-to-mimetype-store-name>FILEPATH_TO_SUFFIX</filepath-to-mimetype-store-name>
					<ignored-emails-directory>%%value:ignored-emails-directory%%</ignored-emails-directory>
					<partially-failed-emails-directory>%%value:partially-failed-emails-directory%%</partially-failed-emails-directory>
					<content-types>
						<action>%%value:content-type-action%%</action>
						<values>%%value:content-type-values%%</values>
					</content-types>
					<discard-duplicate-attachments>%%value:discard-duplicate-attachments%%</discard-duplicate-attachments>
					<concatenate-message-bodies>%%value:concatenate-message-bodies%%</concatenate-message-bodies>
					<remove-signatures>%%value:remove-signatures%%</remove-signatures>
					<move-failed-emails>%%value:move-failed-emails%%</move-failed-emails>
					<failed-emails-directory>%%value:failed-emails-directory%%</failed-emails-directory>
					<get-metadata-from-message>%%value:get-metadata-from-message%%</get-metadata-from-message>
					<metadata-names>%%value:metadata-names%%</metadata-names>
					<output-package-metadata>%%value:output-package-metadata%%</output-package-metadata>
					<filter-archive-types>%%value:filter-archive-types%%</filter-archive-types>
					<archive-extraction-timeout>%%value:archive-extraction-timeout%%</archive-extraction-timeout>
					<execution-type>MMTE</execution-type>
					<MMTE>MMTE</MMTE>
				</config>
			</module>
			
			<module ref="Packager">
				<class>com.picdar.process2.Acquisition.Packager.Packager</class>
				<config>
					<package-location-store>PACKAGE_LOC</package-location-store>
					<package-file-to-type-store>FILEPATH_TO_SUFFIX</package-file-to-type-store>
					<metadata-store-name>IMAGE_DO</metadata-store-name>
					<metadata-default-datasource>%%value:datasource%%</metadata-default-datasource>
					<metadata-default-tablename>PICTURE</metadata-default-tablename>
					<package-metadata>
						<property-store name="QUEUE_INFO">
							<map propfield="FEED_NAME" dofield="FEED_NAME"/>
						</property-store>

						<property-store name="COMMON_METADATA">
							<map propfield="MESSAGE_BODY" dofield="EMAIL_CONTENT"/>
							<map propfield="Subject" dofield="EMAIL_SUBJECT,JOB_NUMBER"/>
							<map propfield="From" dofield="EMAIL_SENDER"/>
							<!--map propfield="CHP_EMAIL" dofield="EMAIL_TO"/-->
						</property-store>

						<filename-fields>FILENAME</filename-fields>
						<filepath-fields>FILEPATH</filepath-fields>

					</package-metadata>
					<item-location>filesystem</item-location>
					<text-report>true</text-report>
					<loaded-directory>%%value:loadedDir%%</loaded-directory>
					<rejected-directory>%%value:rejectsDir%%</rejected-directory>
                    			<partially-rejected-directory>%%value:partialRejectsDir%%</partially-rejected-directory>
					<move-package>true</move-package>
					<delete-on-success>true</delete-on-success>
					<reject-condition>all</reject-condition>
					<descend>false</descend>
					<ignored-items-store>ignored-items</ignored-items-store>
					<rejected_items-store>rejected-items</rejected_items-store>
					<successful-items-store>successful-items</successful-items-store>
					<move-type>normal</move-type>
					<ignoreZeroLength>true</ignoreZeroLength>
					<direxcludefilter>.*</direxcludefilter>
					<dirincludefilter></dirincludefilter>
					<fileexcludefilter>.*</fileexcludefilter>
					<fileincludefilter></fileincludefilter>
				</config>
			</module>

			<module ref="AssetMetadataExtractor">
				<class>com.picdar.process2.Acquisition.AssetMetadata.AssetMetadataExtractor</class>
				<config>
					<MMTE>%%value:mmte%%</MMTE>
					<retrieve-data><dataobject>IMAGE_DO</dataobject></retrieve-data>
					<store-data><asset-metadata>IMAGE_MD</asset-metadata><dataobject>IMAGE_DO</dataobject></store-data>
					<extract-primary-key iptc-tag="external ref">false</extract-primary-key>
					%%value:iptc-mappings%%
				</config>
			</module>
			
			<module ref="AssetIdentifier">
				<class>com.picdar.process2.Acquisition.AssetMetadata.AssetTypeChecker</class>
				<config>
					<allowedtypes>%%value:allowed-types%%</allowedtypes>
					<retrieve-data><asset-metadata>IMAGE_MD</asset-metadata></retrieve-data>
		    			<action-for-non-allowed>ignore</action-for-non-allowed>
				</config>
			</module>
			
			<module ref="TransactionStart">
				<class>com.picdar.process2.Core.TransactionStart</class>
				<config/>
			</module>
			
	            	<module ref="DataObjectLoader">
				<class>com.picdar.process2.Repository.DataObjectLoader.DataObjectLoader</class>
				<config>
					<source-location>filesystem</source-location>
					<match-existing-records>false</match-existing-records>
					<create-asset-records>true</create-asset-records>
					<version-action>PUSH_ORIGINAL_TO_VERSION</version-action>
					<object-name>IMAGE_DO</object-name>
                			<append-attributes>%%value:append-attributes%%</append-attributes>
				</config>
			</module>
			
			<module ref="AssetSetLoader">
				<class>com.picdar.process2.Repository.AssetSetLoader.AssetSetLoader</class>
				<config>
					<mmte-store-assets>true</mmte-store-assets>
					<AllowedDataObjectTypes>PICTURE</AllowedDataObjectTypes>
					<CreateNewCookie>true</CreateNewCookie>
					<GenerateAssetProperties>true</GenerateAssetProperties>
					<MMTE>%%value:mmte%%</MMTE>
					<retrieve-data><metadata>IMAGE_MD</metadata><dataobject>IMAGE_DO</dataobject></retrieve-data>
					<mmte-store-asset-set>%%value:asset-store-set%%</mmte-store-asset-set>
					<source-location>filesystem</source-location>
				</config>
			</module>
			
			<module ref="Set owner">
				<class>com.picdar.process2.Repository.Security.SetOwnershipAndPolicies</class>
				<config>
					<readName>IMAGE_DO</readName>
					<default>
						<owner role="%%value:OWNER%%"/>
					</default>
				</config>
			</module>

			<module ref="TransactionEnd">
				<class>com.picdar.process2.Core.TransactionEnd</class>
				<config/>
			</module>
			
			<module ref="Link_to_stories">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<!--statement>insert into linked_asset (LINK_TO,CREATION_STAMP,ESCENIC_ID,DESCRIPTION,MARKUP_NAME,CAPTION,LINK_ID,SEGMENTS,BYLINE,HEADLINE,TIMESTAMP,ROTATE_AND_FLIP,TYPE,SORT_INDEX,ASSET_ID,ESCENIC_TRANSFORM,PLACEMENT,QUALITY,VERSION_ID,NAME) select s.asset_id,sysdate,'','Attached to email','','','TRMRMMGLLINK'||lpad(linked_asset_seq.nextval,12,'0'),'','','',sysdate,0,'associated',0,p.asset_id,'','','','','' from story s, picture p where s.feed_name='%%value:feed-name%%' and s.creation_stamp>sysdate-0.1 and p.feed_name='%%value:feed-name%%' and p.creation_stamp>sysdate-0.1 and s.job_number=p.job_number and not exists (select 1 from linked_asset where link_to=s.asset_id and asset_id=p.asset_id)</statement-->
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into linked_asset (LINK_TO,CREATION_STAMP,ESCENIC_ID,DESCRIPTION,MARKUP_NAME,CAPTION,LINK_ID,SEGMENTS,BYLINE,HEADLINE,TIMESTAMP,ROTATE_AND_FLIP,TYPE,SORT_INDEX,ASSET_ID,ESCENIC_TRANSFORM,PLACEMENT,QUALITY,VERSION_ID,NAME) select s.asset_id,sysdate,'','Attached to email','','','TRMRMMGLLINK'||lpad(linked_asset_seq.nextval,12,'0'),'','','',sysdate,0,'associated',0,p.asset_id,'','','','','' from story s, picture p where s.feed_name='%%value:feed-name%%' and p.feed_name='%%value:feed-name%%' and s.job_number=p.job_number and p.asset_id = '@@read-from:IMAGE_DO:_KEY_@@' and not exists (select 1 from linked_asset where link_to=s.asset_id and asset_id=p.asset_id)</statement>
				</config>
			</module>

			<module ref="Get Commission Record">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<!--statement>SELECT ASSET_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@'</statement-->
					<statement>SELECT ASSET_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@' UNION ALL SELECT NULL AS ASSET_ID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@')</statement>
					<store_name>COMMISSION_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Link to Commission if exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="CommissionObjExist">
								<criteria>
									<criterion field="COMMISSION_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="COMMISSION_DO">
						<rules>
							<rule name="CommissionExist">
								<criteria>
									<!--criterion field="ASSET_ID" operator="ne" value="NONE"/-->
									<criterion field="ASSET_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_packages (node_id, timestamp, asset_id) select '@@read-from:COMMISSION_DO:ASSET_ID@@', sysdate, p.asset_id from picture p where p.asset_id = '@@read-from:IMAGE_DO:_KEY_@@' and p.feed_name='%%value:feed-name%%' and not exists (select 1 from asset_packages where node_id = '@@read-from:COMMISSION_DO:ASSET_ID@@' and asset_id=p.asset_id)</statement>
					<statement>insert into mm_queue (CREATION_STAMP,TABLE_NAME,ATTEMPT_COUNT,DATABASE,QUEUE_NAME,PRIORITY,PRIMARY_KEY,STATUS,LAST_ERROR,FEED_NAME,ITEM_KEY,USER_NAME,QUEUE_INDEX,ACTION,INFO,INDEX_ID,UPDATE_STAMP) select sysdate,'',0,'','PCP_COMMISSION_LINK_UPDATE',10,mm_index_queue_seq.nextval,'PENDING','','',p.asset_id,'Administrator',mm_index_queue_seq.nextval,'link','@@read-from:COMMISSION_DO:ASSET_ID@@',mm_index_queue_seq.nextval,sysdate from picture p where p.asset_id = '@@read-from:IMAGE_DO:_KEY_@@' and p.feed_name='%%value:feed-name%%'</statement>
				</config>
			</module>

			<module ref="Link to Lobby community folder if Commission not exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="CommissionObjExist">
								<criteria>
									<criterion field="COMMISSION_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="COMMISSION_DO">
						<rules>
							<rule name="CommissionNotExist">
								<criteria>
									<!--criterion field="ASSET_ID" operator="eq" value="NONE"/-->
									<criterion field="ASSET_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_category(asset_id,timestamp,node_id) select p.asset_id, sysdate, h.node_id from picture p, hard_categories h where p.feed_name='%%value:feed-name%%' and p.asset_id = '@@read-from:IMAGE_DO:_KEY_@@' and upper(h.key) = upper('%%value:community-folder%%') and not exists (select 1 from asset_category where asset_id = p.asset_id and node_id = h.node_id)</statement>
				</config>
			</module>

			<module ref="Get Number of Contracts associated with this Commission">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT COUNT(NODE_ID) AS NO_OF_CONTRACT FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@')</statement>
					<store_name>CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Get Default Contract">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) AND DEFAULT_ROYALTY = 1 UNION ALL SELECT NULL AS NODE_ID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) AND DEFAULT_ROYALTY = 1)</statement>
					<store_name>DEFAULT_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>


			<module ref="Set Contributor (default contract) to the asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractExist">
								<criteria>
									<criterion field="NODE_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select p.asset_id, sysdate, '@@read-from:DEFAULT_CONTRACT_DO:NODE_ID@@' from picture p where p.feed_name='%%value:feed-name%%' and p.asset_id = '@@read-from:IMAGE_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = p.asset_id and royalty_id = '@@read-from:DEFAULT_CONTRACT_DO:NODE_ID@@')</statement>
				</config>
			</module>

			<module ref="Get First Available Contract if Default Contract Not Exist">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractNotExist">
								<criteria>
									<criterion field="NODE_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<statement>SELECT MIN(NODE_ID) AS NODE_ID FROM SUPPLIER WHERE PARENT_ID = (SELECT CHPCONTRIBUTOR_ID FROM PCP_COMMISSION WHERE COMMISSION_ID = '@@read-from:IMAGE_DO:JOB_NUMBER@@' AND CHPCONTRIBUTOR_ID IS NOT NULL) AND (DEFAULT_ROYALTY != 1 OR DEFAULT_ROYALTY IS NULL)</statement>
					<store_name>FIRST_CONTRACT_DO</store_name>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>yes</add_to_process_item>
				</config>
			</module>

			<module ref="Set Contributor (first contract) to the asset">
				<class>com.picdar.process2.Repository.JDBCStatement.ProcessItemJDBCStatement</class>
				<config>
					<all_conditions_must_match>yes</all_conditions_must_match>
					<run_conditions rule-process-item="">
						<rules>
							<rule name="ContractObjExist">
								<criteria>
									<criterion field="CONTRACT_DO" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="CONTRACT_DO">
						<rules>
							<rule name="ContractsExist">
								<criteria>
									<criterion field="NO_OF_CONTRACT" operator="gt" value="0" datatype="number"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="DEFAULT_CONTRACT_DO">
						<rules>
							<rule name="DefaultContractNotExist">
								<criteria>
									<criterion field="NODE_ID" operator="notexists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>
					<run_conditions rule-do-item="FIRST_CONTRACT_DO">
						<rules>
							<rule name="FirstContractExist">
								<criteria>
									<criterion field="NODE_ID" operator="exists"/>
								</criteria>
							</rule>
						</rules>
					</run_conditions>

					<datasource>default</datasource>
					<use-at>yes</use-at>
					<stores_field_names>no</stores_field_names>
					<add_to_process_item>no</add_to_process_item>
					<statement>insert into asset_royalty_link(ASSET_ID,TIMESTAMP,ROYALTY_ID) select p.asset_id, sysdate, '@@read-from:FIRST_CONTRACT_DO:NODE_ID@@' from picture p where p.feed_name='%%value:feed-name%%' and p.asset_id = '@@read-from:IMAGE_DO:_KEY_@@' and not exists (select 1 from asset_royalty_link where asset_id = p.asset_id and royalty_id = '@@read-from:FIRST_CONTRACT_DO:NODE_ID@@')</statement>
				</config>
			</module>
			
			<module ref="Re-index asset">
			     <class>com.picdar.process2.Repository.Indexer.Indexer</class>
			     <config>
			           <index-manager-resource>QueueIndexManager</index-manager-resource>
			           <datasource>default</datasource>
			           <failureiscritical>false</failureiscritical>
			           <indexfrom>dataobject</indexfrom>
			           <data-object-name>IMAGE_DO</data-object-name>
			           <indextables>picture,story,document,media,composite,page</indextables>
			           <batchsize>10</batchsize>
			     </config>
			</module>

		</modules>
		%%template:ProcessSchedule%%
	</config>
</media-mogul-configuration>